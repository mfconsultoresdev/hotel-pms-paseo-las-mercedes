generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/hotel_pms_paseo_las_mercedes/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CORE HOTEL MANAGEMENT SYSTEM MODELS

// 1. HOTELS TABLE
model Hotel {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String
  description String?
  tax_id      String?
  logo_url    String?
  
  // Multi-currency support
  default_currency String @default("USD")
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  floors      Floor[]
  rooms       Room[]
  users       User[]
  services    Service[]
  guests      Guest[]
  reservations Reservation[]
  transactions Transaction[]

  @@map("hotels")
}

// 2. ROLES TABLE
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json?    // JSON array of permissions
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  users       User[]

  @@map("roles")
}

// 3. USERS TABLE (Extended for hotel system)
model User {
  id            String    @id @default(cuid())
  name          String?
  first_name    String?
  last_name     String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  
  // Hotel-specific fields
  employee_id   String?   @unique
  phone         String?
  position      String?
  department    String?
  is_active     Boolean   @default(true)
  
  // Relations
  hotel_id      String
  hotel         Hotel     @relation(fields: [hotel_id], references: [id])
  role_id       String
  role          Role      @relation(fields: [role_id], references: [id])

  // Audit fields
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    String?
  updated_by    String?

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // Operations created by this user
  reservations_created Reservation[] @relation("ReservationCreatedBy")
  checkins_created     Reservation[] @relation("CheckInBy")
  checkouts_created    Reservation[] @relation("CheckOutBy")
  transactions_created Transaction[] @relation("TransactionCreatedBy")

  @@map("users")
}

// 4. FLOORS TABLE
model Floor {
  id          String   @id @default(cuid())
  hotel_id    String
  floor_number Int
  name        String?  // e.g., "Piso 1", "Ground Floor"
  description String?
  is_active   Boolean  @default(true)

  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  hotel       Hotel    @relation(fields: [hotel_id], references: [id])
  rooms       Room[]

  @@unique([hotel_id, floor_number])
  @@map("floors")
}

// 5. ROOM_TYPES TABLE
model RoomType {
  id          String   @id @default(cuid())
  name        String   // Individual, Doble, Suite
  description String?
  max_occupancy Int    @default(1)
  base_rate_usd   Decimal @db.Decimal(10,2) @default(0)
  base_rate_usdt  Decimal @db.Decimal(10,2) @default(0)
  base_rate_eur   Decimal @db.Decimal(10,2) @default(0)
  base_rate_bnb   Decimal @db.Decimal(10,8) @default(0)
  base_rate_etc   Decimal @db.Decimal(10,8) @default(0)
  
  // Features
  amenities   Json?    // JSON array of amenities
  size_sqm    Float?
  bed_type    String?  // Single, Double, Queen, King
  bed_count   Int      @default(1)
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  rooms       Room[]

  @@map("room_types")
}

// 6. ROOMS TABLE
model Room {
  id          String    @id @default(cuid())
  room_number String
  hotel_id    String
  floor_id    String
  room_type_id String
  
  // Room details
  status      String    @default("AVAILABLE") // AVAILABLE, OCCUPIED, CLEANING, MAINTENANCE, OUT_OF_ORDER
  notes       String?
  last_cleaned DateTime?
  
  // Features
  has_minibar Boolean   @default(false)
  has_balcony Boolean   @default(false)
  has_view    Boolean   @default(false)
  wifi_password String?
  
  // Audit fields
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  hotel       Hotel     @relation(fields: [hotel_id], references: [id])
  floor       Floor     @relation(fields: [floor_id], references: [id])
  room_type   RoomType  @relation(fields: [room_type_id], references: [id])
  reservations Reservation[]
  transactions Transaction[]

  @@unique([hotel_id, room_number])
  @@map("rooms")
}

// 7. GUESTS TABLE
model Guest {
  id          String   @id @default(cuid())
  hotel_id    String
  
  // Personal information
  first_name  String
  last_name   String
  email       String?
  phone       String?
  
  // Identification
  document_type String?  // ID, PASSPORT, DRIVER_LICENSE
  document_number String?
  nationality String?
  date_of_birth DateTime?
  
  // Address
  address     String?
  city        String?
  country     String?
  postal_code String?
  
  // Guest profile
  vip_status  Boolean  @default(false)
  preferences Json?    // JSON object for preferences
  notes       String?
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  hotel       Hotel    @relation(fields: [hotel_id], references: [id])
  reservations Reservation[]
  transactions Transaction[]

  @@unique([hotel_id, email])
  @@unique([hotel_id, document_type, document_number])
  @@map("guests")
}

// 8. SERVICES TABLE
model Service {
  id          String   @id @default(cuid())
  hotel_id    String
  name        String
  description String?
  category    String   // RESTAURANT, SPA, LAUNDRY, MINIBAR, ROOM_SERVICE, OTHER
  
  // Multi-currency pricing
  price_usd   Decimal  @db.Decimal(10,2) @default(0)
  price_usdt  Decimal  @db.Decimal(10,2) @default(0)
  price_eur   Decimal  @db.Decimal(10,2) @default(0)
  price_bnb   Decimal  @db.Decimal(10,8) @default(0)
  price_etc   Decimal  @db.Decimal(10,8) @default(0)
  
  is_active   Boolean  @default(true)
  is_taxable  Boolean  @default(true)
  tax_rate    Decimal  @db.Decimal(5,2) @default(0) // Percentage
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String?
  updated_by  String?

  // Relations
  hotel       Hotel    @relation(fields: [hotel_id], references: [id])
  transactions Transaction[]

  @@map("services")
}

// 9. RESERVATIONS TABLE
model Reservation {
  id          String   @id @default(cuid())
  reservation_number String @unique
  hotel_id    String
  room_id     String
  guest_id    String
  
  // Reservation details
  check_in_date  DateTime
  check_out_date DateTime
  adults         Int      @default(1)
  children       Int      @default(0)
  nights         Int
  
  // Pricing (stored in selected currency)
  currency       String   @default("USD")
  room_rate      Decimal  @db.Decimal(10,2)
  total_amount   Decimal  @db.Decimal(10,2)
  taxes          Decimal  @db.Decimal(10,2) @default(0)
  discounts      Decimal  @db.Decimal(10,2) @default(0)
  
  // Status tracking
  status         String   @default("CONFIRMED") // CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED, NO_SHOW
  payment_status String   @default("PENDING")   // PENDING, PARTIAL, PAID, REFUNDED
  
  // Check-in/out details
  actual_check_in  DateTime?
  actual_check_out DateTime?
  check_in_by      String?
  check_out_by     String?
  
  // Special requests
  special_requests String?
  notes           String?
  
  // Audit fields
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  created_by      String
  updated_by      String?

  // Relations
  hotel           Hotel    @relation(fields: [hotel_id], references: [id])
  room            Room     @relation(fields: [room_id], references: [id])
  guest           Guest    @relation(fields: [guest_id], references: [id])
  creator         User     @relation("ReservationCreatedBy", fields: [created_by], references: [id])
  check_in_user   User?    @relation("CheckInBy", fields: [check_in_by], references: [id])
  check_out_user  User?    @relation("CheckOutBy", fields: [check_out_by], references: [id])
  transactions    Transaction[]

  @@map("reservations")
}

// 10. TRANSACTIONS TABLE
model Transaction {
  id          String   @id @default(cuid())
  hotel_id    String
  
  // Transaction details
  type        String   // ROOM_CHARGE, SERVICE_CHARGE, PAYMENT, REFUND, ADJUSTMENT
  description String
  amount      Decimal  @db.Decimal(10,2)
  currency    String   @default("USD")
  
  // References
  reservation_id String?
  room_id       String?
  guest_id      String?
  service_id    String?
  
  // Payment details
  payment_method String? // CASH, CREDIT_CARD, CRYPTO, BANK_TRANSFER
  reference_number String?
  
  // Status
  status      String   @default("COMPLETED") // PENDING, COMPLETED, CANCELLED, REFUNDED
  notes       String?
  
  // Audit fields
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String
  updated_by  String?

  // Relations
  hotel       Hotel    @relation(fields: [hotel_id], references: [id])
  reservation Reservation? @relation(fields: [reservation_id], references: [id])
  room        Room?    @relation(fields: [room_id], references: [id])
  guest       Guest?   @relation(fields: [guest_id], references: [id])
  service     Service? @relation(fields: [service_id], references: [id])
  creator     User     @relation("TransactionCreatedBy", fields: [created_by], references: [id])

  @@map("transactions")
}
